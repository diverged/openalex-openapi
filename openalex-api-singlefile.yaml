openapi: 3.1.0
info:
  title: OpenAlex API
  description: An OpenAPI specification for the OpenAlex API
  version: 1.0.0
  license:
    name: CC0 1.0 Universal
    url: https://creativecommons.org/publicdomain/zero/1.0/
servers:
  - url: https://api.openalex.org

security:
  - PoliteEmail: []

components:
  securitySchemes:
    PoliteEmail:
      type: apiKey
      name: email
      in: header
      description: Optional email address for polite requests
  schemas:
    Autocomplete:
      $ref: './components/schemas/autocomplete.yaml'
    Cursor:
      $ref: './components/schemas/cursor.yaml'
    Filter:
      $ref: './components/schemas/filter.yaml'
    GroupBy:
      $ref: './components/schemas/group_by.yaml'
    Meta:
      $ref: './components/schemas/meta.yaml'
    Page:
      $ref: './components/schemas/page.yaml'
    PerPage:
      $ref: './components/schemas/per_page.yaml'
    Search:
      $ref: './components/schemas/search.yaml'
    Select:
      $ref: './components/schemas/select.yaml'
    Sort:
      $ref: './components/schemas/sort.yaml'
    Topic:
      type: object
      properties:
        id:
          type: string
          description: The OpenAlex ID for this topic.
          example: "https://openalex.org/T11636"
        display_name:
          type: string
          description: The English-language label of the topic.
          example: "Artificial Intelligence in Medicine"
        description:
          type: string
          description: A description of this topic, generated by AI.
          example: "This cluster of papers explores the intersection of artificial intelligence and medicine, focusing on applications in healthcare, medical imaging, clinical decision support, and the ethical challenges associated with AI implementation. It delves into topics such as machine learning, big data, precision medicine, and the potential impact of AI on health equity."
        score:
          type: number
          format: float
          description: The strength of the connection between the work and this topic.
          example: 0.95
        subfield:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the subfield.
              example: 2718
            display_name:
              type: string
              description: The name of the subfield.
              example: "Health Informatics"
        field:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the field.
              example: 27
            display_name:
              type: string
              description: The name of the field.
              example: "Medicine"
        domain:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the domain.
              example: 4
            display_name:
              type: string
              description: The name of the domain.
              example: "Health Sciences"
        ids:
          type: object
          description: All the external identifiers that we know about for this topic. IDs are expressed as URIs whenever possible.
          properties:
            openalex:
              type: string
              description: This topic's OpenAlex ID. Same as Topic.id.
              example: "https://openalex.org/T11636"
            wikipedia:
              type: string
              description: This topic's Wikipedia page URL.
              example: "https://en.wikipedia.org/wiki/Artificial_intelligence_in_healthcare"
        keywords:
          type: array
          description: Keywords consisting of one or several words each, meant to represent the content of the papers in the topic.
          items:
            type: string
          example:
            - "Artificial Intelligence"
            - "Machine Learning"
            - "Healthcare"
            - "Medical Imaging"
            - "Clinical Decision Support"
        works_count:
          type: integer
          description: The number of works tagged with this topic.
          example: 21737
        updated_date:
          type: string
          format: date-time
          description: The last time anything in this topic object changed, expressed as an ISO 8601 date string. This date is updated for any change at all, including increases in various counts.
          example: "2024-02-05T05:00:03.798420"
        cited_by_count:
          type: integer
          description: The number of citations to works tagged with this topic.
          example: 382
        works_api_url:
          type: string
          description: URL to retrieve works tagged with this topic.
          example: "https://api.openalex.org/works?filter=topics.id:T11636"
        created_date:
          type: string
          format: date
          description: The date this topic was created in the OpenAlex database, expressed as an ISO 8601 date string.
          example: "2022-01-01"
      required:
        - id
        - display_name

  parameters:
    filter:
      $ref: './components/parameters/filter_parameter.yaml'
    search:
      $ref: './components/parameters/search_parameter.yaml'
    sort:
      $ref: './components/parameters/sort_parameter.yaml'
    page:
      $ref: './components/parameters/page_parameter.yaml'
    per_page:
      $ref: './components/parameters/per_page_parameter.yaml'
    select:
      $ref: './components/parameters/select_parameter.yaml'
    group_by:
      $ref: './components/parameters/group_by_parameter.yaml'
    autocomplete:
      $ref: './components/parameters/autocomplete_parameter.yaml'
    cursor:
      $ref: './components/parameters/cursor_page_parameter.yaml'

paths:
  /topics:
    get:
      operationId: listTopics
      summary: List Topics
      description: Returns a list of topics.
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/group_by'
        - name: sample
          in: query
          description: Get a random sample of results
          schema:
            type: integer
          example: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  group_by:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupBy'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '429':
          description: Too many requests
  /topics/{id}:
    get:
      operationId: getTopic
      summary: Get a single Topic
      description: Returns details for a single topic.
      parameters:
        - name: id
          in: path
          required: true
          description: OpenAlex ID of the topic
          schema:
            type: string
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404':
          description: Topic not found
        '403':
          description: Forbidden
        '429':
          description: Too many requests
  /autocomplete/{entity_type}:
    get:
      operationId: autocompleteEntities
      summary: Autocomplete entities
      description: Returns a list of entities that match the given query string for autocomplete suggestions.
      parameters:
        - name: entity_type
          in: path
          required: true
          schema:
            type: string
            enum: [authors, concepts, funders, institutions, publishers, sources, topics, works]
        - $ref: '#/components/parameters/autocomplete'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Autocomplete'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the bad request
