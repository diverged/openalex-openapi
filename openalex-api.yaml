openapi: 3.0.0
info:
  title: OpenAlex API
  description: An OpenAPI specification for the OpenAlex API
  version: 1.0.0
servers:
  - url: https://api.openalex.org
paths:
  /authors:
    $ref: ./paths/authors.yaml
  /concepts:
    $ref: ./paths/concepts.yaml
  /funders:
    $ref: ./paths/funders.yaml
  /institutions:
    $ref: ./paths/institutions.yaml
  /keywords:
    $ref: ./paths/keywords.yaml
  /publishers:
    $ref: ./paths/publishers.yaml
  /sources:
    $ref: ./paths/sources.yaml
  /topics:
    $ref: ./paths/topics.yaml
  /works:
    $ref: ./paths/works.yaml
  /autocomplete/{entity_type}:
    get:
      summary: Autocomplete entities
      description: Returns a list of entities that match the given query string for autocomplete suggestions.
      parameters:
        - name: entity_type
          in: path
          required: true
          schema:
            type: string
            enum: [authors, concepts, funders, institutions, publishers, sources, topics, works]
        - $ref: '#/components/parameters/autocomplete'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Autocomplete'
  
components:
  schemas:
    Author:
      $ref: './components/schemas/author.yaml'
    Authorship:
      $ref: './components/schemas/authorship.yaml'
    Autocomplete:
      $ref: './components/schemas/autocomplete.yaml'
    Concept:
      $ref: './components/schemas/concept.yaml'
    Cursor:
      $ref: './components/schemas/cursor.yaml'
    DehydratedAuthor:
      $ref: './components/schemas/dehydrated_author.yaml'
    DehydratedConcept:
      $ref: './components/schemas/dehydrated_concept.yaml'
    DehydratedInstitution:
      $ref: './components/schemas/dehydrated_institution.yaml'
    DehydratedSource:
      $ref: './components/schemas/dehydrated_source.yaml'
    Filter:
      $ref: './components/schemas/filter.yaml'
    Funder:
      $ref: './components/schemas/funder.yaml'
    GroupBy:
      $ref: './components/schemas/group_by.yaml'
    Institution:
      $ref: './components/schemas/institution.yaml'
    Keyword:
      $ref: './components/schemas/keyword.yaml'
    Location:
      $ref: './components/schemas/location.yaml'
    Meta:
      $ref: './components/schemas/meta.yaml'
    Page:
      $ref: './components/schemas/page.yaml'
    PerPage:
      $ref: './components/schemas/per_page.yaml'
    Publisher:
      $ref: './components/schemas/publisher.yaml'
    Search:
      $ref: './components/schemas/search.yaml'
    Select:
      $ref: './components/schemas/select.yaml'
    Sort:
      $ref: './components/schemas/sort.yaml'
    Source:
      $ref: './components/schemas/source.yaml'
    Topic:
      $ref: './components/schemas/topic.yaml'
    Work:
      $ref: './components/schemas/work.yaml'

  parameters:
    filter:
      $ref: './components/parameters/filter_parameter.yaml'
    search:
      $ref: './components/parameters/search_parameter.yaml'
    sort:
      $ref: './components/parameters/sort_parameter.yaml'
    page:
      $ref: './components/parameters/cursor_page_parameter.yaml'
    per_page:
      $ref: './components/parameters/per_page_parameter.yaml'
    select:
      $ref: './components/parameters/select_parameter.yaml'
    group_by:
      $ref: './components/parameters/group_by_parameter.yaml'
    autocomplete:
      $ref: './components/parameters/autocomplete_parameter.yaml'
    cursor:
      $ref: './components/parameters/cursor_page_parameter.yaml'
